lane :prepare_for_release do |options|
  ensure_git_status_clean()
  ensure_git_flow_init()
  prepare_lane_options(
    options: options,
    mapping: {
      :xcodeproj => {:env_var => "XCODEPROJ"}
    }
  )
  develop_branch = git_get_develop_branch()
  if git_branch() != develop_branch
    UI.user_error! "You must run this lane on the '#{develop_branch}' only"
  end
  version_number = get_version_number(xcodeproj: options[:xcodeproj])
  build_number = get_build_number(xcodeproj: options[:xcodeproj])
  ensure_version_availability(
    current_version_number: version_number,
    current_build_number: build_number
  )
  version_number = lane_context[SharedValues::NEXT_VERSION_NUMBER]
  build_number = lane_context[SharedValues::NEXT_BUILD_NUMBER]
  if !UI.confirm("Are you sure to submit release version '#{version_number}' build ##{build_number} ?")
    UI.user_error! "User abort the release"
  end
end

lane :appfile_init do |options|
  prepare_lane_options(
    options: options,
    mapping: {
      :xcodeproj => { env_var: "XCODEPROJ" },
      :fetch_app_identifier => { default_value: 1 },
      :fetch_apple_id => { default_value: 1 },
      :fetch_team_name => { default_value: 1 },
      :fetch_itc_team_name => { default_value: 1 }
    }
  )
  fields = []
  app_identifier = nil
  if options[:fetch_app_identifier] == 1
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    fields.push({
      name: "App identifier",
      value: app_identifier,
      lane_context: :APPFILE_APP_IDENTIFIER,
      optional: false
    })
  end
  if options[:fetch_apple_id] == 1
    fields.push({
      name: "Apple ID",
      value: CredentialsManager::AppfileConfig.try_fetch_value(:apple_id),
      lane_context: :APPFILE_APPLE_ID
    })
  end
  if options[:fetch_team_name] == 1
    fields.push({
      name: "Team name",
      value: CredentialsManager::AppfileConfig.try_fetch_value(:team_name),
      lane_context: :APPFILE_TEAM_NAME
    })
  end
  if options[:fetch_itc_team_name] == 1
    fields.push({
      name: "iTunes Connect Team name",
      value: CredentialsManager::AppfileConfig.try_fetch_value(:itc_team_name),
      lane_context: :APPFILE_ITC_TEAM_NAME
    })
  end
  user_validation(fields: fields)
  if app_identifier != Actions.lane_context[:APPFILE_APP_IDENTIFIER]
    project_info = get_project_info(xcodeproj: options[:xcodeproj])
    update_app_identifier(
      app_identifier: Actions.lane_context[:APPFILE_APP_IDENTIFIER],
      xcodeproj: project_info[:xcodeproj],
      plist_path: project_info[:info_plist]
    )
  end
  app_file_data = ""
  if app_identifier = Actions.lane_context[:APPFILE_APP_IDENTIFIER]
    app_file_data += "app_identifier \"#{app_identifier}\" # The bundle identifier of your app\n"
  end
  if apple_id = Actions.lane_context[:APPFILE_APPLE_ID]
    app_file_data += "apple_id \"#{apple_id}\" # Your Apple email address\n"
  end
  if team_name = Actions.lane_context[:APPFILE_TEAM_NAME]
    app_file_data += "team_name \"#{team_name}\"\n"
  end
  if itc_team_name = Actions.lane_context[:APPFILE_ITC_TEAM_NAME]
    app_file_data += "itc_team_name \"#{itc_team_name}\"\n"
  end
  File.open("Appfile", "w") { |file|
    file.puts(app_file_data)
  }
end
