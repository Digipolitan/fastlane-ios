desc "Init the Fastlane Appfile with a user interaction"
desc "#### How to install ?"
desc "This lane require actions define in [Digipolitan/fastlane-common](https://github.com/Digipolitan/fastlane-common)"
desc "```\nimport_from_git(\n  url: 'https://github.com/Digipolitan/fastlane-common'\n)\n```"
desc "#### Example : Fetch only the app_identifier"
desc "```\nfastlane appfile_init fetch_app_identifier:false\n```"
desc "#### Options"
desc "* __**xcodeproj**__: The Xcode project path, if the project isn't in your root directory"
desc "  * **environment_variable**: XCODEPROJ"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* __**fetch_app_identifier**__: Ask the user about the app_identifier"
desc "  * **type**: boolean"
desc "  * **default_value**: true"
desc "* __**fetch_apple_id**__: Ask the user about the apple account"
desc "  * **type**: boolean"
desc "  * **default_value**: true"
desc "* __**fetch_team_name**__: Ask the user about the Dev Portal Team"
desc "  * **type**: boolean"
desc "  * **default_value**: true"
desc "* __**fetch_itc_team_name**__: Ask the user about the iTunes Connect Team"
desc "  * **type**: boolean"
desc "  * **default_value**: true"
desc ""
lane :appfile_init do |options|
  prepare_lane_options(
    options: options,
    bind_params: [
      Actions::BindParamBuilder.new(:xcodeproj).env_var("XCODEPROJ").build(),
      Actions::BindParamBuilder.new(:fetch_app_identifier).transform(BindParamTransform::Boolean).default_value(true).build(),
      Actions::BindParamBuilder.new(:fetch_apple_id).transform(BindParamTransform::Boolean).default_value(true).build(),
      Actions::BindParamBuilder.new(:fetch_team_name).transform(BindParamTransform::Boolean).default_value(true).build(),
      Actions::BindParamBuilder.new(:fetch_itc_team_name).transform(BindParamTransform::Boolean).default_value(true).build()
    ]
  )
  bind_params = []
  appfile_fetch(
    fetch_app_identifier: options[:fetch_app_identifier],
    fetch_apple_id: options[:fetch_apple_id],
    fetch_team_name: options[:fetch_team_name],
    fetch_itc_team_name: options[:fetch_itc_team_name]
  )
  app_identifier = Actions.lane_context[SharedValues::APPFILE_APP_IDENTIFIER] # Current value
  if options[:fetch_app_identifier] == true
    bind_params.push(Actions::BindParamBuilder.new("App identifier").lane_context(SharedValues::APPFILE_APP_IDENTIFIER).required().build())
  end
  if options[:fetch_apple_id] == true
    bind_params.push(Actions::BindParamBuilder.new("Apple ID").lane_context(SharedValues::APPFILE_APPLE_ID).build())
  end
  if options[:fetch_team_name] == true
    bind_params.push(Actions::BindParamBuilder.new("Team name").lane_context(SharedValues::APPFILE_TEAM_NAME).build())
  end
  if options[:fetch_itc_team_name] == true
    bind_params.push(Actions::BindParamBuilder.new("iTunes Connect Team name").lane_context(SharedValues::APPFILE_ITC_TEAM_NAME).build())
  end
  user_validation(bind_params: bind_params)
  if app_identifier != Actions.lane_context[SharedValues::APPFILE_APP_IDENTIFIER]
    project_info = get_project_info(xcodeproj: options[:xcodeproj])
    update_app_identifier(
      app_identifier: Actions.lane_context[SharedValues::APPFILE_APP_IDENTIFIER],
      xcodeproj: project_info[:xcodeproj],
      plist_path: project_info[:info_plist]
    )
  end
  app_file_data = ""
  if app_identifier = Actions.lane_context[SharedValues::APPFILE_APP_IDENTIFIER]
    app_file_data += "app_identifier \"#{app_identifier}\" # The bundle identifier of your app\n"
  end
  if apple_id = Actions.lane_context[SharedValues::APPFILE_APPLE_ID]
    app_file_data += "apple_id \"#{apple_id}\" # Your Apple email address\n"
  end
  if team_name = Actions.lane_context[SharedValues::APPFILE_TEAM_NAME]
    app_file_data += "team_name \"#{team_name}\"\n"
  end
  if itc_team_name = Actions.lane_context[SharedValues::APPFILE_ITC_TEAM_NAME]
    app_file_data += "itc_team_name \"#{itc_team_name}\"\n"
  end
  File.open("Appfile", "w") { |file|
    file.puts(app_file_data)
  }
end

desc "Build and run all Xcode tests"
desc "#### Example:"
desc "```\nfastlane tests workspace:NAME.xcworkspace\n```"
desc "#### How to install ?"
desc "This lane require actions define in [Digipolitan/fastlane-common](https://github.com/Digipolitan/fastlane-common)"
desc "```\nimport_from_git(\n  url: 'https://github.com/Digipolitan/fastlane-common'\n)\n```"
desc "#### Options"
desc "* __**test_scheme**__: The scheme into the Xcode project to execute, the scheme is required on the CI environement"
desc "  * **environment_variable**: TEST_SCHEME"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* __**xcworkspace**__: The workspace to use."
desc "  * **environment_variable**: XCWORKSPACE"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "* __**xcodeproj**__: The Xcode project to select"
desc "  * **environment_variable**: XCODEPROJ"
desc "  * **type**: string"
desc "  * **optional**: true"
desc "#### Environment variables"
desc "* __**SLACK_URL**__: The slack Hook URL"
desc "  * **type**: string"
desc "  * **optional**: true"
desc ""
lane :run_tests do |options|
  prepare_lane_options(
    options: options,
    bind_params: [
      Actions::BindParamBuilder.new(:test_scheme).env_var("TEST_SCHEME").ci_required().build(),
      Actions::BindParamBuilder.new(:xcworkspace).env_var("XCWORKSPACE").build(),
      Actions::BindParamBuilder.new(:xcodeproj).env_var("XCODEPROJ").build()
    ]
  )
  if files_matching(pattern: "Podfile") != nil
    cocoapods()
  end
  scan(
    workspace: options[:xcworkspace],
    project: options[:xcodeproj],
    scheme: options[:test_scheme],
    slack_only_on_failure: (git_branch() != git_get_master_branch()),
    clean: true
  )
end
